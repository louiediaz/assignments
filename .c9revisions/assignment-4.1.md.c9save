{"ts":1379078569435,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1379078573698,"patch":[[{"diffs":[[1,"function login()\n{\n    if (!empty($_POST)) {\n        $msg = '';\n        $user = read_user($_POST['user_name']);\n        if (isset($user['user_name'])) {\n            if (password_verify($_POST['user_password'], $user['user_password_hash'])) {\n                create_session($user);\n                header('Location: ' . $_SERVER['PHP_SELF']);\n                exit();\n            } else $msg = 'Wrong password';\n        } else $msg = 'User does not exist';\n        $_SESSION['msg'] = $msg;\n    }\n    return login_form();\n}\n\nfunction register()\n{\n    if (!empty($_POST)) {\n        $msg = '';\n        if ($_POST['user_name']) {\n            if ($_POST['user_password_new']) {\n                if ($_POST['user_password_new'] === $_POST['user_password_repeat']) {\n                    if (strlen($_POST['user_password_new']) > 5) {\n                        if (strlen($_POST['user_name']) < 65 && strlen($_POST['user_name']) > 1) {\n                            if (preg_match('/^[a-z\\d]{2,64}$/i', $_POST['user_name'])) {\n                                $user = read_user($_POST['user_name']);\n                                if (!isset($user['user_name'])) {\n                                    if ($_POST['user_email']) {\n                                        if (strlen($_POST['user_email']) < 65) {\n                                            if (filter_var($_POST['user_email'], FILTER_VALIDATE_EMAIL)) {\n                                                create_user();\n                                                $_SESSION['msg'] = 'You are now registered so please login';\n                                                header('Location: ' . $_SERVER['PHP_SELF']);\n                                                exit();\n                                            } else $msg = 'You must provide a valid email address';\n                                        } else $msg = 'Email must be less than 64 characters';\n                                    } else $msg = 'Email cannot be empty';\n                                } else $msg = 'Username already exists';\n                            } else $msg = 'Username must be only a-z, A-Z, 0-9';\n                        } else $msg = 'Username must be between 2 and 64 characters';\n                    } else $msg = 'Password must be at least 6 characters';\n                } else $msg = 'Passwords do not match';\n            } else $msg = 'Empty Password';\n        } else $msg = 'Empty Username';\n        $_SESSION['msg'] = $msg;\n    }\n    return register_form();\n}\n\nfunction install()\n{\n    $dbc = cfg('dbconf');\n    $dbh = cfg('db', db_init($dbc));\n    $pri = $dbc['type'] === 'mysql'\n        ? 'int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT'\n        : 'INTEGER PRIMARY KEY';\n    $ind = $dbc['type'] === 'mysql'\n        ? ' ALTER TABLE `users` ADD UNIQUE (`user_name`);'\n        : 'CREATE UNIQUE INDEX `user_name_UNIQUE` ON `users` (`user_name` ASC);';\n\n    // uncomment below to reinstall tables while testing\n    //$dbh->exec(\"DROP TABLE IF EXISTS `users`;\");\n\n    try {\n        $dbh->exec(\"\nCREATE TABLE IF NOT EXISTS `users` (\n`user_id` $pri,\n`user_name` varchar(64),\n`user_password_hash` varchar(255),\n`user_email` varchar(64));\n$ind\");\n    } catch (PDOException $e) {\n        die($e->getMessage()); // TODO: should we really use die() ?\n    }\n    $_POST['user_name'] = cfg('admin');\n    $_POST['user_email'] = cfg('email');\n    $_POST['user_password_new'] = cfg('passwd');\n    create_user();\n    $_SESSION = array();\n    $_SESSION['msg'] = 'Database and default user are now installed, please login';\n    header('Location: ' . $_SERVER['PHP_SELF']);\n    exit();\n}\n\n// private support functions\n// TODO @mark: this needs documentation/comments\nfunction cfg($k = NULL, $v = NULL)\n{\n    static $stash = array();\n    if (empty($k)) return $stash;\n    if (is_array($k)) return $stash = array_merge($stash, $k);\n    if ($v) $stash[$k] = $v;\n    return isset($stash[$k]) ? $stash[$k] : NULL;\n}\n\nfunction init($cfg)\n{\n    if (!empty($_POST)) cfg('db', db_init($cfg['dbconf']));\n    $action = isset($_REQUEST['a'])\n        ? strtolower(str_replace(' ', '_', trim($_REQUEST['a'])))\n        : 'home';\n    return in_array($action, array('home', 'login', 'logout', 'register', 'install'))\n        ? $action()\n        : '<b>Error: action does not exist</b>';\n}"]],"start1":0,"start2":0,"length1":0,"length2":4304}]],"length":4304,"saved":false}
{"ts":1379079805305,"patch":[[{"diffs":[[0,"</b>';\n}"],[1,"\n\n// Variable names could be more descriptive\n//"]],"start1":4296,"start2":4296,"length1":8,"length2":56}]],"length":4352,"saved":false}
{"ts":1379082455846,"patch":[[{"diffs":[[-1,"function login()\n{\n    if (!empty($_POST))"],[1,"class Bootstrap"],[0," {\n"],[1,"\n"],[0,"    "],[-1,"    $msg = '';\n        $user = read_user($_POST['user_name'])"],[1,"private $_url = null;\n    private $_controller = null"],[0,";\n    "],[1,"\n"],[0,"    "],[-1,"if (isset($user['user_name'])) {\n            if (password_verify($_POST['user_password'], $user['user_password_hash'])) {\n                create_session($user);\n                header('Location: ' . $_SERVER['PHP_SELF']);\n                exit();\n            } else $msg = 'Wrong password';\n        } else $msg = 'User does not exist"],[1,"private $_controllerPath = 'controllers/'; // Always include trailing slash\n    private $_modelPath = 'models/'; // Always include trailing slash\n    private $_errorFile = 'error.php';\n    private $_defaultFile = 'index.php"],[0,"';\n    "],[1,"\n"],[0,"    "],[-1,"$_SESSION['msg'] = $msg;\n    }\n    return login_form();\n}\n\nfunction register"],[1,"/**\n* Starts the Bootstrap\n*\n* @return boolean\n*/\n    public function __construct"],[0,"()\n"],[-1,"{\n"],[0,"    "],[-1,"if (!empty($_POST)) {\n        $msg = '';\n        if ($_POST['user_name']) {\n            if ($_POST['user_password_new']) {\n                if ($_POST['user_password_new'] === $_POST['user_password_repeat']) {\n                    if (strlen($_POST['user_password_new']) > 5) {\n                        if (strlen($_POST['user_name']) < 65 && strlen($_POST['user_name']) > 1) {\n                            if (preg_match('/^[a-z\\d]{2,64}$/i', $_POST['user_name'])) {\n                                $user = read_user($_POST['user_name']);\n                                if (!isset($user['user_name'])) {\n      "],[1,"{\n        // Sets the protected $_url\n        $this->_getUrl();\n\n        // Load the default controller if no URL is set\n        // eg: Visit http://localhost it loads Default Controller\n        if (empty($this->_url[0])) {\n            $this->_loadDefaultController();\n            return false;\n"],[0,"        "],[-1,"      "],[1,"}\n\n"],[0,"        "],[-1,"        if ($_POST['user_email']) {\n                                        if (strlen($_POST['user_email']) < 65) {\n                                            if (filter_var($_POST['user_email'], FILTER_VALIDATE_EMAIL)) {\n                                                create_user();\n                 "],[1,"$this->_loadExistingController();\n        $this->_callControllerMethod();\n    }\n"],[0,"    "],[1,"\n"],[0,"    "],[-1,"                       $_SESSION['msg'] = 'You are now registered so please login';\n                                                header('Location: ' . $_SERVER['PHP_SELF']);\n                                                exit();\n                                            } else $msg = 'You must provide a valid email address';\n                                        } else $msg = 'Email must be less than 64 characters';\n                                    } else $msg = 'Email cannot be empty';\n                      "],[1,"/**\n* (Optional) Set a custom path to controllers\n* @param string $path\n*/\n    public function setControllerPath($path)\n    {\n        $this->_controllerPath = trim($path, '/') . '/';\n    }\n"],[0,"    "],[1,"\n"],[0,"    "],[-1,"  } else $msg = 'Username already exists';\n                            } else $msg = 'Username must be only a-z, A-Z, 0-9';\n                        } else $msg = 'Username must be between 2 and 64 characters';\n                    } else $msg = 'Password must be at least 6 characters';\n                } else $msg = 'Passwords do not match';\n            } else $msg = 'Empty Password';\n        } else $msg = 'Empty Username';\n        $_SESSION['msg'] = $msg;\n    }\n    return register_form();\n}\n\nfunction install()\n{\n    $dbc = cfg('dbconf');\n    $dbh = cfg('db', db_init($dbc));\n    $pri = $dbc['type'] === 'mysql'\n        ? 'int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT'\n        : 'INTEGER PRIMARY KEY';\n    $ind = $dbc['type'] === 'mysql'\n        ? ' ALTER TABLE `users` ADD UNIQUE (`user_name`);'\n        : 'CREATE UNIQUE INDEX `user_name_UNIQUE` ON `users` (`user_name` ASC);';\n\n    // uncomment below to reinstall tables while testing\n    //$dbh->exec(\"DROP TABLE IF EXISTS `users`;\");\n\n    try {\n        $dbh->exec(\"\nCREATE TABLE IF NOT EXISTS `users` (\n`user_id` $pri,\n`user_name` varchar(64),\n`user_password_hash` varchar(255),\n`user_email` varchar(64));\n$ind\");\n    } catch (PDOException $e) {\n        die($e->getMessage()); // TODO: should we really use die() ?\n    }\n    $_POST['user_name'] = cfg('admin');\n    $_POST['user_email'] = cfg('email');\n    $_POST['user_password_new'] = cfg('passwd');\n    create_user();\n    $_SESSION = array();\n    $_SESSION['msg'] = 'Database and default user are now installed, please login';\n    header('Location: ' . $_SERVER['PHP_SELF']);\n    exit();\n}\n\n// private support functions\n// TODO @mark: this needs documentation/comments\nfunction cfg($k = NULL, $v = NULL)\n{\n    static $stash = array();\n    if (empty($k)) return $stash;\n    if (is_array($k)) return $stash = array_merge($stash, $k);\n    if ($v) $stash[$k] = $v;\n    return isset($stash[$k]) ? $stash[$k] : NULL;\n}\n\nfunction init($cfg)\n{\n    if (!empty($_POST)) cfg('db', db_init($cfg['dbconf']));\n    $action = isset($_REQUEST['a'])\n        ? strtolower(str_replace(' ', '_', trim($_REQUEST['a'])))\n        : 'home';\n    return in_array($action, array('home', 'login', 'logout', 'register', 'install'))\n        ? $action()\n        : '<b>Error: action does not exist</b>';\n}"],[1,"/**\n* (Optional) Set a custom path to models\n* @param string $path\n*/\n    public function setModelPath($path)\n    {\n        $this->_modelPath = trim($path, '/') . '/';\n    }\n    \n    /**\n* (Optional) Set a custom path to the error file\n* @param string $path Use the file name of your controller, eg: error.php\n*/\n    public function setErrorFile($path)\n    {\n        $this->_errorFile = trim($path, '/');\n    }\n    \n    /**\n* (Optional) Set a custom path to the error file\n* @param string $path Use the file name of your controller, eg: index.php\n*/\n    public function setDefaultFile($path)\n    {\n        $this->_defaultFile = trim($path, '/');\n    }\n    \n    /**\n* Fetches the $_GET from 'url'\n*/\n    private function _getUrl()\n    {\n        $url = isset($_GET['url']) ? $_GET['url'] : null;\n        $url = rtrim($url, '/');\n        $url = filter_var($url, FILTER_SANITIZE_URL);\n        $this->_url = explode('/', $url);\n    }\n    \n    /**\n* This loads if there is no GET parameter passed\n*/\n    private function _loadDefaultController()\n    {\n\n        // write URL cookie\n        $this->writeUrlCookie($this->_url);\n\n        require $this->_controllerPath . $this->_defaultFile;\n        $this->_controller = new Index();\n        $this->_controller->index();\n    }\n    \n    /**\n* Load an existing controller if there IS a GET parameter passed\n*\n* @return boolean|string\n*/"],[0,"\n\n//"]],"start1":0,"start2":0,"length1":4308,"length2":2389}]],"length":2433,"saved":false}
